name: Security Scan

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run security scan every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  secret-detection:
    runs-on: ubuntu-latest
    name: Secret Detection & Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS Secret Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --fail

      - name: Custom Secret Pattern Detection
        run: |
          echo "üîç Running custom secret detection patterns..."
          
          # Function to check files and report findings
          check_secrets() {
            local pattern="$1"
            local description="$2"
            local files="$3"
            
            echo "Checking for: $description"
            if find . -name "$files" -type f -exec grep -H -E "$pattern" {} \; 2>/dev/null | grep -v ".git" | grep -v "YOUR_" | grep -v "example" | grep -v "placeholder"; then
              echo "‚ùå Found $description"
              return 1
            else
              echo "‚úÖ No $description found"
              return 0
            fi
          }
          
          # Track if any secrets were found
          secrets_found=0
          
          # Check for WiFi credentials (avoiding placeholders)
          if ! check_secrets "(ssid|password|SSID|PASSWORD)\s*[=:]\s*['\"][^'\"]{3,}['\"]" "WiFi credentials" "*.ino *.cpp *.h *.c"; then
            secrets_found=1
          fi
          
          # Check for API keys and tokens
          if ! check_secrets "(api[_-]?key|token|secret)['\"]?\s*[=:]\s*['\"][a-zA-Z0-9]{16,}['\"]" "API keys or tokens" "*"; then
            secrets_found=1
          fi
          
          # Check for specific network identifiers
          if ! check_secrets "(Livebox|Freebox|SFR|Orange|Bouygues)-[A-Z0-9]+" "Real network names" "*.ino *.cpp *.h *.c"; then
            secrets_found=1
          fi
          
          # Check for MAC addresses
          if ! check_secrets "[0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}[:-][0-9A-Fa-f]{2}" "MAC addresses" "*.ino *.cpp *.h *.c"; then
            secrets_found=1
          fi
          
          # Check for IP addresses (excluding common defaults)
          if ! check_secrets "([0-9]{1,3}\.){3}[0-9]{1,3}" "IP addresses" "*.ino *.cpp *.h *.c" | grep -v "192.168" | grep -v "127.0.0.1" | grep -v "0.0.0.0"; then
            secrets_found=1
          fi
          
          # Check for long hexadecimal strings (potential keys)
          if ! check_secrets "['\"][a-fA-F0-9]{20,}['\"]" "Long hexadecimal strings (potential keys)" "*.ino *.cpp *.h *.c"; then
            secrets_found=1
          fi
          
          if [ $secrets_found -eq 1 ]; then
            echo ""
            echo "‚ùå Security scan failed: Potential secrets detected!"
            echo "Please review the findings above and remove any real credentials."
            echo "Use placeholder values like 'YOUR_WIFI_SSID' instead."
            exit 1
          else
            echo ""
            echo "‚úÖ Security scan passed: No secrets detected!"
          fi

      - name: Check .env files are properly ignored
        run: |
          echo "üîç Checking .env file protection..."
          
          # Check if .env is in .gitignore
          if ! grep -q "^\.env$" .gitignore; then
            echo "‚ùå .env is not properly ignored in .gitignore"
            exit 1
          fi
          
          # Check if any .env files are tracked by git
          if git ls-files | grep -E "\.env$" | grep -v "\.env\.example$"; then
            echo "‚ùå Found .env files tracked by git:"
            git ls-files | grep -E "\.env$" | grep -v "\.env\.example$"
            exit 1
          fi
          
          echo "‚úÖ .env files are properly protected"

      - name: Check for TODO/FIXME security items
        run: |
          echo "üîç Checking for security-related TODOs..."
          
          security_todos=$(grep -r -i -E "(TODO|FIXME|XXX).*(password|secret|key|security|auth)" . --include="*.ino" --include="*.cpp" --include="*.h" --include="*.md" || true)
          
          if [ -n "$security_todos" ]; then
            echo "‚ö†Ô∏è  Found security-related TODOs:"
            echo "$security_todos"
            echo ""
            echo "Please review these items before deployment."
          else
            echo "‚úÖ No security-related TODOs found"
          fi
